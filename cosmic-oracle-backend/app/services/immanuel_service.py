# app/services/immanuel_service.py

from typing import Dict, Any
from datetime import datetime
import logging

# Import the individual service functions this orchestrator will use.
# This assumes they are all available to be imported.
from .astrology_service import get_natal_chart_details_service
from .dignity_service import get_chart_dignities_service
from .numerology_service import get_numerology_report_service
from .fixed_star_service import get_fixed_star_conjunctions_service
from .content_fetch_service import content_fetcher_instance

# Setup logger
logger = logging.getLogger(__name__)

class ImmanuelService:
    """
    Orchestrates multiple astrological and esoteric services to generate
    a single, comprehensive "Immanuel Report".
    """
    def generate_full_report(self, name: str, dt_utc: datetime, latitude: float, longitude: float) -> Dict[str, Any]:
        """
        Generates a comprehensive report by calling and combining results
        from various other services.
        """
        final_report = {
            "report_metadata": {
                "report_type": "Immanuel Comprehensive Report",
                "generated_at_utc": datetime.utcnow().isoformat() + 'Z'
            },
            "input_data": {
                "name": name,
                "dt_utc": dt_utc.isoformat() + 'Z',
                "latitude": latitude,
                "longitude": longitude
            },
            "core_chart": None,
            "essential_dignities": None,
            "numerology_profile": None,
            "fixed_star_connections": None,
            "spiritual_summary": None, # This would be generated by an AI or rule-based text generator
            "errors": []
        }

        # --- Step 1: Get the Core Natal Chart ---
        try:
            core_chart_data = get_natal_chart_details_service(dt_utc, latitude, longitude)
            if 'error' in core_chart_data:
                raise ValueError(core_chart_data['error'])
            final_report["core_chart"] = core_chart_data
        except Exception as e:
            logger.error(f"Immanuel Report: Failed to get core natal chart. Error: {e}")
            final_report["errors"].append("Could not generate the core astrological chart.")
            # If the core chart fails, we cannot proceed with other astro calculations.
            return final_report

        # --- Step 2: Get Essential Dignities ---
        try:
            dignity_data = get_chart_dignities_service(dt_utc, latitude, longitude)
            if 'error' in dignity_data:
                raise ValueError(dignity_data['error'])
            final_report["essential_dignities"] = dignity_data
        except Exception as e:
            logger.error(f"Immanuel Report: Failed to get dignities. Error: {e}")
            final_report["errors"].append("Dignity analysis could not be completed.")

        # --- Step 3: Get Fixed Star Conjunctions ---
        try:
            star_data = get_fixed_star_conjunctions_service(dt_utc, latitude, longitude)
            if 'error' in star_data:
                raise ValueError(star_data['error'])
            final_report["fixed_star_connections"] = star_data
        except Exception as e:
            logger.error(f"Immanuel Report: Failed to get fixed stars. Error: {e}")
            final_report["errors"].append("Fixed star analysis could not be completed.")
            
        # --- Step 4: Get Numerology Profile (uses different inputs) ---
        try:
            numerology_data = get_numerology_report_service(name, dt_utc.date())
            if 'error' in numerology_data:
                raise ValueError(numerology_data['error'])
            final_report["numerology_profile"] = numerology_data
        except Exception as e:
            logger.error(f"Immanuel Report: Failed to get numerology. Error: {e}")
            final_report["errors"].append("Numerology profile could not be generated.")

        # --- Step 5: Generate a Spiritual Summary (Example using content_fetcher) ---
        # In a real-world scenario, this could be a call to a generative AI (like GPT)
        # with the collected data as context.
        try:
            sun_sign = final_report.get("core_chart", {}).get("points", {}).get("Sun", {}).get("sign_name")
            moon_sign = final_report.get("core_chart", {}).get("points", {}).get("Moon", {}).get("sign_name")
            life_path = final_report.get("numerology_profile", {}).get("life_path_number")

            if sun_sign and moon_sign and life_path:
                prompt_key = f"immanuel_summary_{sun_sign}_{moon_sign}_{life_path}"
                summary_text = content_fetcher_instance.get_interpretation(
                    prompt_key,
                    f"This individual embodies the radiant energy of a {sun_sign} Sun, with the intuitive depth of a {moon_sign} Moon. Their life journey is guided by the Life Path number {life_path}, suggesting a path of..."
                )
                final_report["spiritual_summary"] = summary_text
        except Exception as e:
            logger.error(f"Immanuel Report: Failed to generate summary. Error: {e}")
            final_report["errors"].append("Spiritual summary could not be generated.")
            
        return final_report


# --- Singleton Pattern for the Service ---
_immanuel_service_instance = None

def _get_immanuel_service_instance() -> ImmanuelService:
    global _immanuel_service_instance
    if _immanuel_service_instance is None:
        _immanuel_service_instance = ImmanuelService()
    return _immanuel_service_instance

def get_immanuel_report_service(name: str, dt_utc: datetime, latitude: float, longitude: float) -> Dict[str, Any]:
    """Public-facing function to generate the Immanuel Report."""
    return _get_immanuel_service_instance().generate_full_report(name, dt_utc, latitude, longitude)