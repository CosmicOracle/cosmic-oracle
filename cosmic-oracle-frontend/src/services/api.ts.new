import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { Headers } from 'node-fetch';

// Define response types for strict typing
interface BaseResponse {
  success: boolean;
  message?: string;
  data?: unknown;
}

// Define parameter types
interface VisibleStarsParams {
  latitude: number;
  longitude: number;
}

interface PlanetaryDignitiesParams {
  date: string;
  time: string;
}

interface ChartIdParam {
  chartId: string;
}

interface TimingParams extends ChartIdParam {
  technique: string;
}

interface DateRangeParams {
  startDate: string;
  endDate: string;
}

interface YearParam {
  year: number;
}

interface BirthChartParams {
  date: string;
  time: string;
  latitude: number;
  longitude: number;
}

// Model types
export interface User {
  id: string;
  email: string;
  birthDate: string;
  birthTime: string;
  birthLocation: string;
}

export interface BirthChart {
  id: string;
  userId: string;
  name: string;
  birthDate: string;
  birthTime: string;
  birthLocation: string;
  timezone: string;
}

export interface MoonInfo {
  phase: string;
  sign: string;
  house: number;
}

export interface TransitAspect {
  to: string;
  type: string;
  orb: number;
}

export interface Transit {
  planet: string;
  sign: string;
  house: number;
  aspects: TransitAspect[];
}

export enum Dignity {
  RULERSHIP = 'RULERSHIP',
  EXALTATION = 'EXALTATION',
  TRIPLICITY = 'TRIPLICITY',
  TERM = 'TERM',
  FACE = 'FACE',
  DETRIMENT = 'DETRIMENT',
  FALL = 'FALL',
}

export interface Pattern {
  name: string;
  description: string;
  planets: string[];
}

export interface TimingTechnique {
  name: string;
  description: string;
}

export interface PredictiveEvent {
  startDate: string;
  endDate: string;
  description: string;
  type: string;
  significance: string;
}

export interface AstrologicalChart {
  id: string;
  userId: string;
  type: 'natal' | 'transit' | 'composite';
  data: BirthChart;
  interpretation: string;
  createdAt: string;
}

export interface DashboardSummary {
  title: string;
  summaryText: string;
  dynamicTip: string;
  sourceDateLoaded: boolean;
  aiPowered: boolean;
}

export interface StarPosition {
  name: string;
  ra: number;
  dec: number;
  magnitude: number;
  constellation: string;
}

export interface DignityScore {
  score: number;
  reasons: string[];
}

export interface PlanetaryDignity {
  planet: string;
  essential: DignityScore;
  accidental: DignityScore;
}

const TAG_TYPES = ['User', 'Chart', 'Dashboard'] as const;
type TagType = typeof TAG_TYPES[number];

type ProvidesTags = { type: TagType; id?: string }[];

// Create API slice with endpoints
export const api = createApi({
  reducerPath: 'api',
  tagTypes: TAG_TYPES,
  baseQuery: fetchBaseQuery({ 
    baseUrl: 'http://localhost:8000/api',
    prepareHeaders: (headers: Headers) => {
      const token = localStorage.getItem('token');
      if (token) {
        headers.set('Authorization', `Bearer ${token}`);
      }
      return headers;
    }
  }),
  endpoints: (build) => ({
    // User endpoints
    getCurrentUser: build.query<User, void>({
      query: () => 'users/me',
      providesTags: () => [{ type: 'User' }]
    }),
    updateUser: build.mutation<User, Partial<User>>({
      query: (update: Partial<User>) => ({
        url: 'users/me',
        method: 'PATCH',
        body: update,
      }),
      invalidatesTags: [{ type: 'User' }]
    }),

    // Chart endpoints
    getBirthChart: build.query<BirthChart, BirthChartParams>({
      query: (params: BirthChartParams) => ({
        url: 'astronomical/birth-chart',
        params,
      }),
      providesTags: () => [{ type: 'Chart' }]
    }),
    getCurrentTransits: build.query<Transit[], void>({
      query: () => 'astronomical/current-transits',
      providesTags: () => [{ type: 'Chart' }]
    }),
    getMoonInfo: build.query<MoonInfo, void>({
      query: () => 'astronomical/moon-info',
      providesTags: () => [{ type: 'Chart' }]
    }),
    getVisibleStars: build.query<StarPosition[], VisibleStarsParams>({
      query: (params: VisibleStarsParams) => ({
        url: 'astronomical/visible-stars',
        params,
      }),
      providesTags: () => [{ type: 'Chart' }]
    }),
    getPlanetaryDignities: build.query<PlanetaryDignity[], PlanetaryDignitiesParams>({
      query: (params: PlanetaryDignitiesParams) => ({
        url: 'astronomical/dignities',
        params,
      }),
      providesTags: () => [{ type: 'Chart' }]
    }),
    getAspectPatterns: build.query<Pattern[], ChartIdParam>({
      query: ({ chartId }: ChartIdParam) => `astronomical/patterns/${chartId}`,
      providesTags: () => [{ type: 'Chart' }]
    }),
    
    // Predictive endpoints
    getTimingTechniques: build.query<TimingTechnique[], TimingParams>({
      query: ({ chartId, technique }: TimingParams) => `predictive/timing/${chartId}/${technique}`,
      providesTags: () => [{ type: 'Chart' }]
    }),
    getPredictiveEvents: build.query<PredictiveEvent[], DateRangeParams>({
      query: (params: DateRangeParams) => ({
        url: 'predictive/events',
        params,
      }),
      providesTags: () => [{ type: 'Chart' }]
    }),
    getEclipses: build.query<PredictiveEvent[], YearParam>({
      query: ({ year }: YearParam) => `predictive/eclipses/${year}`,
      providesTags: () => [{ type: 'Chart' }]
    }),

    // Saved Charts Management
    getSavedChart: build.query<AstrologicalChart, string>({
      query: (chartId: string) => `charts/${chartId}`,
      providesTags: (_result, _error, id) => [{ type: 'Chart', id }]
    }),
    saveChart: build.mutation<AstrologicalChart, Partial<AstrologicalChart>>({
      query: (chart: Partial<AstrologicalChart>) => ({
        url: 'charts',
        method: 'POST',
        body: chart,
      }),
      invalidatesTags: [{ type: 'Chart' }]
    }),
    
    // Dashboard & Interpretation
    getDashboardSummary: build.query<DashboardSummary, void>({
      query: () => 'dashboard/summary',
      providesTags: () => [{ type: 'Dashboard' }]
    }),
    getChartInterpretation: build.query<string, { chartId: string }>({
      query: ({ chartId }: { chartId: string }) => `charts/${chartId}/interpretation`,
      providesTags: () => [{ type: 'Chart' }]
    }),
  }),
});

// Export hooks for usage in components
export const {
  useGetCurrentUserQuery,
  useUpdateUserMutation,
  useGetBirthChartQuery,
  useGetCurrentTransitsQuery,
  useGetMoonInfoQuery,
  useGetVisibleStarsQuery,
  useGetPlanetaryDignitiesQuery,
  useGetAspectPatternsQuery,
  useGetTimingTechniquesQuery,
  useGetPredictiveEventsQuery,
  useGetEclipsesQuery,
  useGetSavedChartQuery,
  useSaveChartMutation,
  useGetDashboardSummaryQuery,
  useGetChartInterpretationQuery,
} = api;
